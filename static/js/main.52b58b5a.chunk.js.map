{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","humidity","temperature","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Title","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52b58b5a.chunk.js","sourcesContent":["import React,{ Component } from 'react';\n\n\nclass Title extends Component{\n  render(){\n    return(\n      <div className=\"title-container\">\n        <div className=\"title\">\n          <h1>Wheather finder</h1>\n          <p className=\"subtitle\">Find out temperature, conditions and more...</p>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default Title;\n","import React, { Component } from 'react';\n\n\nclass Form extends Component{\n  render(){\n    return(\n      <div className=\"form\">\n        <form onSubmit={this.props.getWeather}>\n          <input type=\"text\" name=\"city\" placeholder=\"city\"/>\n          <input type=\"text\" name=\"country\" placeholder=\"country\"/>\n          <button className=\"btn\" >Get weather</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Form\n","import React, { Component } from 'react';\n\n\nclass Weather extends Component{\n  render(){\n    return(\n      <div className=\"weather\">\n        {\n          this.props.city && this.props.country &&\n          <p className=\"key\">Location:\n            <span className=\"value\">{this.props.city}, {this.props.country}</span>\n          </p>\n        }\n        {\n          this.props.humidity &&\n          <p className=\"key\">Humidity:\n            <span className=\"value\">{this.props.humidity}</span>\n          </p>\n        }\n        {\n          this.props.temperature &&\n          <p className=\"key\">Temperature:\n            <span className=\"value\">{this.props.temperature}</span>\n          </p>\n        }\n        {\n          this.props.description&&\n          <p className=\"key\">Description:\n            <span className=\"value\">{this.props.description}</span>\n          </p>\n        }\n        {\n          this.props.error &&\n          <p className=\"key\">\n            <span className=\"value\">{this.props.error}</span>\n          </p>\n        }\n      </div>\n    )\n  }\n}\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport './App.css';\n\n\nconst API_KEY = \"883d4368e97c1b6d0633c88a967e00aa\"; /*https://openweathermap.org/api */\nclass App extends Component {\n\n  state = {\n    temperature:undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e)=>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if(city && country){\n      console.log(data);\n      this.setState({\n        temperature:data.main.temp,\n        city:data.name,\n        country:data.sys.country,\n        humidity:data.main.humidity,\n        description:data.weather[0].description,\n        error:\"\"\n      });\n    }else{\n      this.setState({\n        temperature:undefined,\n        city:undefined,\n        country:undefined,\n        humidity:undefined,\n        description:undefined,\n        error:\"Please enter the value\"\n      });\n    }\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Title/>\n        <div className=\"container-form\">\n          <Form getWeather={this.getWeather}/>\n          <Weather\n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            description={this.state.description}\n            error={this.state.error}/>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}